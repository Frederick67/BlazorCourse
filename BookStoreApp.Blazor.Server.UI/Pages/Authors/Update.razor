@page "/authors/update/{id:int}"
@inject IAuthorService authorService
@inject RemoteNavigationManagerNavigationManager

<h3>Edit Author</h3>

<EditForm Model="Author" OnValidSubmit="HandleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="FirstName">First Name</label>
        <InputText class="form-control" id="FirstName" @bind-Value="Author.FirstName" />
    </div>
    <div class="form-group">
        <label for="LastName">Last Name</label>
        <InputText class="form-control" id="LastName" @bind-Value="Author.LastName" />
    </div>
    <div class="form-group">
        <label for="Bio">Bio</label>
        <InputTextArea class="form-control" id="Bio" @bind-Value="Author.Bio" />
    </div>
    <button class="btn btn-primary" type="submit">Update</button>   
</EditForm>

<button class="btn btn-primary" @onclick="backToList">Back</button>

@code {
    private AuthorUpdateDto Author { get; set; } = new AuthorUpdateDto();

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var response = await authorService.GetAuthorForUpdate(id);
        if (response.Success)
        {
            Author = response.Data;
        }
    }

    private async Task HandleUpdate()
    {
        var response = await authorService.EditAuthor(id, Author);
        if (response.Success)
        {
            backToList();
        }
    }

    private void backToList()
    {
        NavigationManager.NavigateTo("/authors");
    }




}
